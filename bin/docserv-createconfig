#!/usr/bin/env python3
#
# Copyright (c) 2018 SUSE Linux GmbH
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of version 3 of the GNU General Public License as
# published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, contact SUSE LLC.
#
# To contact SUSE about this file by physical or electronic mail,
# you may find current contact information at www.suse.com

"""
Generates a basic default XML configuration for docserv from
Git repositories.
"""

import os
import re
import sys
from xml.etree import cElementTree


def generate_config(languages, branches, contact = None):
    root = cElementTree.Element("product", productid="FIXME", schemaversion="0.9.9")
    cElementTree.SubElement(root, "name").text = "FIXME"
    cElementTree.SubElement(root, "shortname").text = "FIXME"
    maintainers = cElementTree.SubElement(root, "maintainers")
    cElementTree.SubElement(maintainers, "contact").text = "FIXME" if not contact else contact
    for language in languages:
        description = cElementTree.SubElement(root, "desc", default="0", lang=language)
        cElementTree.SubElement(description, "p").text = "FIXME"
    for branch in branches:
        if branch.startswith("trans/"):
            continue
        branch = str(branch)
        docset = cElementTree.SubElement(root, "docset", setid=branch.replace("maintenance/", ""), lifecycle="FIXME")
        cElementTree.SubElement(docset, "version").text = "FIXME"
        builddocs = cElementTree.SubElement(docset, "builddocs")
        git = cElementTree.SubElement(builddocs, "git")
        cElementTree.SubElement(git, "remote").text = "FIXME"
        for language in languages:
            if language == "en-us":
                language = cElementTree.SubElement(builddocs, "language", default="1", lang="en-us")
                cElementTree.SubElement(language, "branch").text = branch
                has_all_dc = "1"
                for dc_file in branches[branch]:
                    if "-all" in dc_file:
                        has_all_dc = "0"
                for dc_file in branches[branch]:
                    deliverable = cElementTree.SubElement(language, "deliverable")
                    cElementTree.SubElement(deliverable, "dc", ).text = dc_file
                    if dc_file.endswith("-all"):
                        format = cElementTree.SubElement(deliverable, "format", pdf="0", html="1", epub="0")
                        format.set('single-html', '0')
                    else:
                        format = cElementTree.SubElement(deliverable, "format", pdf="1", html=has_all_dc, epub="1")
                        format.set('single-html', '1')
            else:
                language = cElementTree.SubElement(builddocs, "language", default="0", language=language)
                if branch.startswith("maintenance/") or branch.startswith("maint/"):
                    tmp = branch.replace("maintenance/", "").replace("maint/", "")
                    if "trans/%s" % tmp in branches:
                        branch = "trans/%s" % tmp
                cElementTree.SubElement(language, "branch").text = branch
                cElementTree.SubElement(language, "subdir").text = "FIXME"
                untrans = cElementTree.SubElement(language, "untranslated")
                deliverable = cElementTree.SubElement(untrans, "deliverable")
                cElementTree.SubElement(deliverable, "dc").text = "FIXME"
        extralinks = cElementTree.SubElement(docset, "extralinks")
        cElementTree.SubElement(extralinks, "link", href="FIXME").text = "SOME DESCRIPTION"
    tree = cElementTree.ElementTree(root)
    configfile = os.getcwd()+"/config.xml"
    tree.write(configfile)
    print("Find the config file at {!r}".format(configfile))

def get_dc_files(path, branches, filter_dc):
    repo = pygit2.Repository(path)
    tmp = branches
    for branch in list(branches):
        foo = repo.lookup_branch(branch)
        repo.checkout(foo)
        result = []
        for f in os.listdir(path):
            if os.path.isfile(os.path.join(path, f)):
                if filter_dc is not None:
                    if str(f).startswith("DC-") and filter_dc in str(f):
                        result.append(f)
                else:
                    if str(f).startswith("DC-"):
                        result.append(f)
        tmp[branch] = sorted(result)
    return tmp

def get_git_branches(path):
    repo = pygit2.Repository(path)
    result = {}
    for branch in sorted((list(repo.listall_branches()) + list(repo.branches.remote))):
        if str(branch).startswith('maintenance/'):
            result[branch] = []
        elif str(branch).replace("origin/", "") == "develop":
            result[branch.replace("origin/", "")] = []
        elif str(branch).replace("origin/", "") == "master":
            result[branch.replace("origin/", "")] = []
        elif str(branch).startswith('origin/trans/'):
            result[branch.replace("origin/", "")] = []
        elif str(branch).startswith('trans/'):
            result[branch] = []
        elif str(branch).startswith('origin/maintenance/'):
            result[branch.replace("origin/", "")] = []
    return result


def parse_cli(cliargs=None):
    """Parse CLI with :class:`argparse.ArgumentParser` and return parsed result.

    :param list cliargs: Arguments to parse or None (=use sys.argv)
    :return: parsed CLI result
    :rtype: :class:`argparse.Namespace`
    """
    import argparse

    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument("-l", "--languages",
                        help=("Uses one or more languages in the format "
                              "'language_country'. "
                              "Upper and lower case is irrelevant."
                              ),
                        )
    parser.add_argument("-f", "--filter",
                        help="Expects DC files which to focus on",
                        )
    parser.add_argument("-m", "--contact",
                        help="The contact email address",
                        )
    parser.add_argument("path",
                        metavar="PATH",
                        help="Path to the repository",
                        )
    args = parser.parse_args(args=cliargs)
    args.LANGUAGES = ("en-us de-de fr-fr pt-br ja-jp zh-cn es-es "
                      "it-it ko-kr hu-hu zh-tw cs-cz ar-ar pl-pl "
                      "ru-ru").split(" ")

    # do some checks:
    args.langs = set(args.languages.replace("_", "-").lower().split(" "))
    if not args.langs.intersection(args.LANGUAGES):
        parser.error("Unknown language {!r} found.\n"
                     "Expected one or more of these:\n"
                     "{}".format(args.languages, ", ".join(args.LANGUAGES))
                     )
    return args


if __name__ == "__main__":
    args = parse_cli()
    # print(args)

    import pygit2
    branches = get_git_branches(args.path)
    dc_files = get_dc_files(args.path, branches, args.filter)
    print(dc_files)
    generate_config(args.LANGUAGES, branches, args.contact)
    sys.exit(0)
